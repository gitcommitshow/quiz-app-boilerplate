[
    {
      "id": 1,
      "version": 10,
      "type": "objective",
      "question": "Which `SQL` clause is used to filter rows in a `SELECT` statement?",
      "options": [
        "WHERE",
        "SELECT",
        "GROUP BY",
        "ORDER BY"
      ],
      "expectedAnswer": "WHERE",
      "hints": [
        "This clause is used before any grouping operations.",
        "It's typically placed after the FROM clause in a SELECT statement."
      ]
    },
    {
      "id": 2,
      "version": 25,
      "type": "subjective",
      "question": "Write a `SQL` query to find the average salary for each department, but only include departments with more than 5 employees. Order the results by the average salary in descending order.\n\n```mermaid\nerDiagram\n    Department ||--o{ Employee : \"has many\"\n    Employee {\n        int id\n        string name\n        int salary\n        int department_id\n    }\n    Department {\n        int id\n        string name\n    }\n```\n\n**Note:** The schema is only indicative, you may use any reasonable table schema in your mental model; the core concept is what matters.",
      "expectedAnswer": "select department, AVG(salary) as salary_avg from employees group by department having count(*) > 5 order by salary_avg desc",
      "keywords": ["SELECT", "AVG", "FROM", "GROUP BY", "department", "HAVING", "COUNT", "ORDER BY", "DESC"],
      "minKeywords": 6,
      "maxLength": 500,
      "hints": [
        "Use GROUP BY to group by department.",
        "HAVING is used to filter grouped results."
      ]
    },
    {
      "id": 3,
      "version": 8,
      "type": "subjective",
      "question": "Write a query to select the top 5 customers who have made the most orders. Include the customer name and the total number of orders they've made. Assume the following database schema:\n\n```mermaid\nerDiagram\n    customers ||--o{ orders : \"has many\"\n    customers {\n        int customer_id\n         string customer_name\n    }\n    orders {\n        int order_id\n        int customer_id\n    }\n```",
      "expectedAnswer": "select c.customer_name, count(o.order_id) as total_orders from customers c join orders o on c.customer_id = o.customer_id group by c.customer_id order by total_orders desc limit 5",
      "keywords": ["SELECT", "customer_name", "COUNT", "orders", "JOIN", "customers", "GROUP BY", "ORDER BY", "DESC", "LIMIT"],
      "minKeywords": 7,
      "maxLength": 600,
      "hints": [
        "Join the customers and orders tables.",
        "Use COUNT and GROUP BY to get the total orders per customer."
      ]
    },
    {
      "id": 4,
      "version": 1,
      "type": "objective",
      "question": "If a data point has a z-score of 2, what does this indicate about its position relative to the mean?",
      "options": [
        "It is 2 units below the mean",
        "It is 2 units above the mean",
        "It is 2 standard deviations below the mean",
        "It is 2 standard deviations above the mean"
      ],
      "expectedAnswer": "It is 2 standard deviations above the mean",
      "hints": [
        "Z-score measures the number of standard deviations from the mean.",
        "A positive z-score indicates a value above the mean."
      ]
    },
    {
      "id": 5,
      "version": 1,
      "type": "objective",
      "question": "Which sampling method is most appropriate when you need to ensure that different subgroups of a population are represented proportionally in your sample?",
      "options": [
        "Simple random sampling",
        "Stratified sampling",
        "Cluster sampling",
        "Convenience sampling"
      ],
      "expectedAnswer": "Stratified sampling",
      "hints": [
        "This method divides the population into subgroups before sampling.",
        "It ensures representation of all subgroups in the final sample."
      ]
    },
    {
      "id": 6,
      "version": 2,
      "type": "subjective",
      "question": "Write a PostgreSQL query to extract the `name` field from a JSON column called `user_data` in a table named `users`, but only for records where the JSON contains a `age` field greater than 30.",
      "expectedAnswer": "SELECT user_data->>'name' AS user_name FROM users WHERE (user_data->>'age')::int > 30;",
      "keywords": ["SELECT", "->", "->>", "name", "age", "user_data", "FROM"],
      "minKeywords": 6,
      "maxLength": 500,
      "hints": [
        "Use the '->' operator to access JSON object fields.",
        "Use the '->>' operator to return JSON object fields as text.",
        "Cast the 'age' field to an integer for comparison."
      ]
    },
    {
      "id": 7,
      "version": 1,
      "type": "objective",
      "question": "Which of the following is NOT a common data warehouse architecture?",
      "options": [
        "Star schema",
        "Snowflake schema",
        "Galaxy schema",
        "Pyramid schema"
      ],
      "expectedAnswer": "Pyramid schema",
      "hints": [
        "Think about the most common dimensional modeling techniques.",
        "One of these options is not typically used in data warehousing."
      ]
    },
    {
      "id": 8,
      "version": 1,
      "type": "subjective",
      "question": "Explain the concept of data partitioning in big data systems and provide an example of how it can improve query performance.",
      "expectedAnswer": "Data partitioning is the process of dividing large datasets into smaller, more manageable pieces called partitions. This technique can significantly improve query performance by allowing parallel processing and reducing the amount of data scanned. For example, in a large table of sales data, partitioning by date can allow queries for specific time periods to scan only relevant partitions, rather than the entire dataset.",
      "keywords": ["dataset", "processing", "performance"],
      "minKeywords": 5,
      "maxLength": 600,
      "hints": [
        "Consider how breaking up data can affect query execution.",
        "Think about scenarios where you'd want to access only a portion of a large dataset."
      ]
    },
    {
      "id": 9,
      "version": 1,
      "type": "objective",
      "question": "Which of the following is a characteristic of a slowly changing dimension (`SCD`) Type 2 in data warehousing?",
      "options": [
        "Overwriting the old value with the new value",
        "Adding a new column for the new value",
        "Creating a new row for each change, preserving historical data",
        "Maintaining separate current and historical tables"
      ],
      "expectedAnswer": "Creating a new row for each change, preserving historical data",
      "hints": [
        "Think about how historical data is handled in different SCD types.",
        "Consider which method allows for tracking changes over time within the same table."
      ]
    },
    {
      "id": 10,
      "version": 1,
      "type": "subjective",
      "question": "The following SQL query is intended to retrieve the total sales for each product category, but it contains an error. Identify and fix the error: `SELECT category, SUM(sales) FROM products GROUP BY product_id;`",
      "expectedAnswer": "SELECT category, SUM(sales) FROM products GROUP BY category;",
      "keywords": ["SELECT", "SUM", "FROM", "GROUP BY"],
      "minKeywords": 4,
      "maxLength": 300,
      "hints": [
        "Ensure that the GROUP BY clause includes the correct column.",
        "Think about how to aggregate data by category."
      ]
    },
    {
      "id": 11,
      "version": 1,
      "type": "subjective",
      "question": "Optimize the following SQL query to improve its performance: `SELECT * FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE status = 'active');`",
      "expectedAnswer": "SELECT o.* FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.status = 'active';",
      "keywords": ["SELECT", "FROM", "WHERE", "JOIN"],
      "minKeywords": 4,
      "maxLength": 300,
      "hints": [
        "Consider using a JOIN instead of a subquery.",
        "Think about how to reduce the number of rows processed."
      ]
    }
  ]